pipeline {
    agent any
       
       stages{
         stage('GCP Cred'){
            steps{
                 withCredentials([file(credentialsId: 'gcp-key', variable: 'GC_KEY')]) {
            sh("gcloud auth activate-service-account --key-file=${GC_KEY}")
               }
        }
}
        stage('Terraform Apply') {
            steps {
                script {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
        }
        }

stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker login -u  --key-file=${GC_KEY} https://gcr.io'
                    sh 'docker build -t eu.gcr.io/tf-gcp-connection/my-app:latest .'
                    sh 'docker push eu.gcr.io/tf-gcp-connection/my-app:latest'
                }
            }
        }

stage('Build docker image') {
    when { expression { true } }
      steps{
        container('docker'){
          dir('Backend Net/MyDotnet') {
            echo 'Build docker image Start'
            sh 'pwd'
            sh 'docker build -t europe-central2.gcr.io/tf-gcp-connect/my-app:latest .'
            withCredentials([file(credentialsId: 'gcp-key', variable: 'GC_KEY')]){
              sh 'cat "${GC_key}" | docker login -u _json_key_base64 --password-stdin https://europe-central2.gcr.io/tf-gcp-connect/my-app' 
              sh 'docker push europe-central2.gcr.io/tf-gcp-connect/my-app:latest'   
              sh 'docker logout europe-central2.gcr.io/tf-gcp-connect/my-app'
            }
            sh 'docker rmi eu.gcr.io/tf-gcp-connect/my-app:latest'
            echo 'Build docker image Finish'
          }
        }
      }
}
        
        stage('Ansible Provision') {
            steps {
                script {
                    sh 'ansible-playbook -i inventory playbook.yml'
                }
            }
        }
  }
}
